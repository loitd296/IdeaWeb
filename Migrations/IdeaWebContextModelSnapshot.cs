// <auto-generated />
using System;
using IdeaWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdeaWeb.Migrations
{
    [DbContext(typeof(IdeaWebContext))]
    partial class IdeaWebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IdeaWeb.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Deleted_Status")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("IdeaWeb.Models.CloseDateAcedamic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CloseDatePostIdea")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CloseDateAcedamic");
                });

            modelBuilder.Entity("IdeaWeb.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Upload")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ideasIdid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userIdid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ideasIdid");

                    b.HasIndex("userIdid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("IdeaWeb.Models.Department", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("IdeaWeb.Models.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Upload")
                        .HasColumnType("datetime2");

                    b.Property<string>("ideasIdid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ideasIdid");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("IdeaWeb.Models.Ideas", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CloseDateAcedamicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("categoryIdId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("date_Upload")
                        .HasColumnType("datetime2");

                    b.Property<int?>("dislike_Count")
                        .HasColumnType("int");

                    b.Property<int?>("like_Count")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userIdid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("CloseDateAcedamicId");

                    b.HasIndex("categoryIdId");

                    b.HasIndex("userIdid");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("IdeaWeb.Models.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Dislike")
                        .HasColumnType("int");

                    b.Property<string>("IDidea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ideasIdid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("like")
                        .HasColumnType("int");

                    b.Property<string>("userIdid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ideasIdid");

                    b.HasIndex("userIdid");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("IdeaWeb.Models.Roles", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("IdeaWeb.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("departmentIdid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("gmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("departmentIdid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("IdeaWeb.Models.UserRole", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roleIdid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userIdid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("roleIdid");

                    b.HasIndex("userIdid");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("IdeaWeb.Models.Comment", b =>
                {
                    b.HasOne("IdeaWeb.Models.Ideas", "ideasId")
                        .WithMany("comments")
                        .HasForeignKey("ideasIdid");

                    b.HasOne("IdeaWeb.Models.User", "userId")
                        .WithMany("comments")
                        .HasForeignKey("userIdid");

                    b.Navigation("ideasId");

                    b.Navigation("userId");
                });

            modelBuilder.Entity("IdeaWeb.Models.Document", b =>
                {
                    b.HasOne("IdeaWeb.Models.Ideas", "ideasId")
                        .WithMany("documents")
                        .HasForeignKey("ideasIdid");

                    b.Navigation("ideasId");
                });

            modelBuilder.Entity("IdeaWeb.Models.Ideas", b =>
                {
                    b.HasOne("IdeaWeb.Models.CloseDateAcedamic", null)
                        .WithMany("ideas")
                        .HasForeignKey("CloseDateAcedamicId");

                    b.HasOne("IdeaWeb.Models.Category", "categoryId")
                        .WithMany("ideas")
                        .HasForeignKey("categoryIdId");

                    b.HasOne("IdeaWeb.Models.User", "userId")
                        .WithMany("Ideas")
                        .HasForeignKey("userIdid");

                    b.Navigation("categoryId");

                    b.Navigation("userId");
                });

            modelBuilder.Entity("IdeaWeb.Models.Rating", b =>
                {
                    b.HasOne("IdeaWeb.Models.Ideas", "ideasId")
                        .WithMany("ratings")
                        .HasForeignKey("ideasIdid");

                    b.HasOne("IdeaWeb.Models.User", "userId")
                        .WithMany("ratings")
                        .HasForeignKey("userIdid");

                    b.Navigation("ideasId");

                    b.Navigation("userId");
                });

            modelBuilder.Entity("IdeaWeb.Models.User", b =>
                {
                    b.HasOne("IdeaWeb.Models.Department", "departmentId")
                        .WithMany("users")
                        .HasForeignKey("departmentIdid");

                    b.Navigation("departmentId");
                });

            modelBuilder.Entity("IdeaWeb.Models.UserRole", b =>
                {
                    b.HasOne("IdeaWeb.Models.Roles", "roleId")
                        .WithMany("userRoles")
                        .HasForeignKey("roleIdid");

                    b.HasOne("IdeaWeb.Models.User", "userId")
                        .WithMany("userRoles")
                        .HasForeignKey("userIdid");

                    b.Navigation("roleId");

                    b.Navigation("userId");
                });

            modelBuilder.Entity("IdeaWeb.Models.Category", b =>
                {
                    b.Navigation("ideas");
                });

            modelBuilder.Entity("IdeaWeb.Models.CloseDateAcedamic", b =>
                {
                    b.Navigation("ideas");
                });

            modelBuilder.Entity("IdeaWeb.Models.Department", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("IdeaWeb.Models.Ideas", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("documents");

                    b.Navigation("ratings");
                });

            modelBuilder.Entity("IdeaWeb.Models.Roles", b =>
                {
                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("IdeaWeb.Models.User", b =>
                {
                    b.Navigation("Ideas");

                    b.Navigation("comments");

                    b.Navigation("ratings");

                    b.Navigation("userRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
